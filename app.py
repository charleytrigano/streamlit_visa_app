# ===============================
# ======   PARTIE 1 / 2    ======
# ===============================

from __future__ import annotations

import os, io, json, zipfile, hashlib, unicodedata, re
from io import BytesIO
from datetime import date, datetime
from typing import Dict, List, Tuple, Any

import pandas as pd
import streamlit as st

# ---------------------------
# Configuration g√©n√©rale UI
# ---------------------------
st.set_page_config(page_title="üõÇ Visa Manager", layout="wide")

st.markdown("""
<style>
/* KPI compacts */
.small-metrics .stMetric {
  padding: 0.2rem 0.4rem !important;
}
.small-metrics [data-testid="stMetricValue"] {
  font-size: 0.9rem !important;
}
.small-metrics [data-testid="stMetricDelta"] {
  font-size: 0.7rem !important;
}
/* S√©lecteurs compacts */
.stSelectbox, .stMultiSelect {
  font-size: 0.9rem !important;
}
</style>
""", unsafe_allow_html=True)

# ---------------------------
# Constantes des colonnes
# ---------------------------
SHEET_CLIENTS = "Clients"
SHEET_VISA    = "Visa"

HONO  = "Montant honoraires (US $)"
AUTRE = "Autres frais (US $)"
TOTAL = "Total (US $)"
DOSSIER_COL = "Dossier N"

# ---------------------------
# Utilitaires s√ªrs / robustes
# ---------------------------
def _safe_str(x: Any) -> str:
    try:
        return "" if x is None else str(x)
    except Exception:
        return ""

def _to_float(x: Any) -> float:
    try:
        if isinstance(x, (int, float)): return float(x)
        s = _safe_str(x)
        s = s.replace(" ", "").replace("\xa0","").replace(",", ".")
        s = re.sub(r"[^0-9.\-]", "", s)
        return float(s) if s not in ("", "-", ".", "-.") else 0.0
    except Exception:
        return 0.0

def _safe_num_series(df: pd.DataFrame, col: str) -> pd.Series:
    if col not in df.columns:
        return pd.Series([0.0]*len(df), dtype=float)
    return pd.to_numeric(df[col].apply(_to_float), errors="coerce").fillna(0.0)

def _fmt_money_us(x: float) -> str:
    try:
        return f"${float(x):,.2f}"
    except Exception:
        return "$0.00"

def _date_for_widget(val, fallback: date | None = None) -> date | None:
    """Assure une valeur compatible st.date_input (√©vite NaT)."""
    if isinstance(val, date): return val
    if isinstance(val, datetime): return val.date()
    try:
        d = pd.to_datetime(val, errors="coerce")
        if pd.isna(d): return fallback
        return d.date()
    except Exception:
        return fallback

def _norm(s: str) -> str:
    """Normalise: ascii, lower, garde a-z0-9 + / _ espace et - (robuste aux accents)."""
    if s is None:
        return ""
    s = unicodedata.normalize("NFKD", str(s))
    s = s.encode("ascii", "ignore").decode("ascii")
    s = s.lower().strip()
    # IMPORTANT : '-' plac√© avant la fin/fin de classe pour √©viter PatternError
    s = re.sub(r"[^a-z0-9+/_ -]+", " ", s)   # <- le '-' est en fin de classe
    s = re.sub(r"\s+", " ", s)
    return s.strip()

def _month_index(m) -> int:
    try:
        mm = int(_safe_str(m))
        return max(0, min(11, mm-1))
    except Exception:
        return 0

def _best_index(opts: List[str], value: str) -> int:
    if value in opts:
        return opts.index(value) + 1  # +1 car on a une option "" devant
    return 0

# ---------------------------
# Cache ‚Äî lecture fichiers
# ---------------------------
@st.cache_data(show_spinner=False)
def read_clients_file(path: str) -> pd.DataFrame:
    return pd.read_excel(path, sheet_name=SHEET_CLIENTS)

@st.cache_data(show_spinner=False)
def read_visa_file(path: str) -> pd.DataFrame:
    # Feuille Visa : ent√™tes = Cat√©gorie, Sous-cat√©gorie, puis colonnes d‚Äôoptions (1 = actif)
    df = pd.read_excel(path, sheet_name=SHEET_VISA)
    return df

@st.cache_data(show_spinner=False)
def write_workbook(df_clients: pd.DataFrame, clients_path: str,
                   df_visa: pd.DataFrame | None, visa_path: str | None) -> Tuple[bool, str]:
    try:
        if clients_path and visa_path and clients_path == visa_path:
            # fichier unique avec 2 onglets
            with pd.ExcelWriter(clients_path, engine="openpyxl") as wr:
                df_clients.to_excel(wr, sheet_name=SHEET_CLIENTS, index=False)
                if df_visa is not None:
                    df_visa.to_excel(wr, sheet_name=SHEET_VISA, index=False)
            return True, ""
        else:
            # deux fichiers s√©par√©s
            with pd.ExcelWriter(clients_path, engine="openpyxl") as wr:
                df_clients.to_excel(wr, sheet_name=SHEET_CLIENTS, index=False)
            if visa_path and df_visa is not None:
                with pd.ExcelWriter(visa_path, engine="openpyxl") as wr:
                    df_visa.to_excel(wr, sheet_name=SHEET_VISA, index=False)
            return True, ""
    except Exception as e:
        return False, _safe_str(e)

# ---------------------------
# Normalisation Clients
# ---------------------------
def normalize_clients(df: pd.DataFrame) -> pd.DataFrame:
    if df is None or df.empty:
        return pd.DataFrame(columns=[
            DOSSIER_COL,"ID_Client","Nom","Date","Mois","Categorie","Sous-categorie","Visa",
            HONO,AUTRE,TOTAL,"Pay√©","Reste","Paiements","Options","Notes",
            "Dossier envoy√©","Date d'envoi","Dossier accept√©","Date d'acceptation",
            "Dossier refus√©","Date de refus","Dossier annul√©","Date d'annulation","RFE","EscrowTransfers"
        ])

    out = df.copy()

    # Colonnes chiffr√©es
    for c in [HONO, AUTRE, TOTAL, "Pay√©", "Reste"]:
        if c in out.columns:
            out[c] = _safe_num_series(out, c)

    # Totaux si manquants
    if TOTAL in out.columns:
        out[TOTAL] = _safe_num_series(out, HONO) + _safe_num_series(out, AUTRE)
    else:
        out[TOTAL] = _safe_num_series(out, HONO) + _safe_num_series(out, AUTRE)

    # Pay√©/Reste par d√©faut
    if "Pay√©" not in out.columns:
        out["Pay√©"] = 0.0
    if "Reste" not in out.columns:
        out["Reste"] = (out[TOTAL] - out["Pay√©"]).clip(lower=0)

    # Paiements & Options en listes
    for jscol in ["Paiements", "Options", "EscrowTransfers"]:
        if jscol not in out.columns:
            out[jscol] = [[] for _ in range(len(out))]
        else:
            out[jscol] = out[jscol].apply(lambda v: v if isinstance(v, list)
                                          else (json.loads(_safe_str(v) or "[]")
                                                if _safe_str(v).startswith("[") else []))

    # Bool/entiers statuts
    for b in ["Dossier envoy√©","Dossier accept√©","Dossier refus√©","Dossier annul√©","RFE"]:
        if b not in out.columns:
            out[b] = 0
        else:
            out[b] = out[b].apply(lambda x: 1 if _to_float(x) != 0 else 0)

    # Dates statut : garder tel quel (converties √† l‚Äôaffichage)
    for dc in ["Date d'envoi","Date d'acceptation","Date de refus","Date d'annulation"]:
        if dc not in out.columns:
            out[dc] = None

    # Date / Mois / Ann√©e techniques
    if "Date" in out.columns:
        try:
            dd = pd.to_datetime(out["Date"], errors="coerce")
            out["_Ann√©e_"] = dd.dt.year
            out["_MoisNum_"] = dd.dt.month
        except Exception:
            out["_Ann√©e_"] = None
            out["_MoisNum_"] = None
    if "Mois" in out.columns:
        out["Mois"] = out["Mois"].astype(str).str.zfill(2)
    else:
        out["Mois"] = out["_MoisNum_"].fillna(1).astype(int).astype(str).str.zfill(2)

    return out

# ---------------------------
# Construction visa_map depuis la feuille Visa
# ---------------------------
def build_visa_map(df_visa: pd.DataFrame) -> Dict[str, Dict[str, Dict[str, Any]]]:
    """
    Construit une structure :
    {
      "Affaires/Tourisme": {
         "B-1": {"options": ["COS","EOS", ...]},
         "B-2": {"options": [...]},
      },
      "Etudiants": {
         "F-1": {...}, ...
      }
    }
    R√®gle : toute colonne (hors Cat√©gorie/Sous-cat√©gorie) o√π la cellule vaut 1 => option active.
    Les libell√©s d‚Äôoptions viennent EXACTEMENT de la ligne d‚Äôent√™te.
    """
    if df_visa is None or df_visa.empty:
        return {}

    # d√©tecter les colonnes Cat√©gorie / Sous-cat√©gorie par normalisation
    cols = list(df_visa.columns)
    cat_col = None
    sub_col = None
    for c in cols:
        n = _norm(c)
        if n in ("categorie", "category") and cat_col is None:
            cat_col = c
        if ("sous" in n and "categor" in n) and sub_col is None:
            sub_col = c
    # fallback
    if cat_col is None: cat_col = "Categorie" if "Categorie" in df_visa.columns else cols[0]
    if sub_col is None:
        sub_candidates = [c for c in cols if c != cat_col]
        sub_col = "Sous-categorie" if "Sous-categorie" in df_visa.columns else (sub_candidates[0] if sub_candidates else cols[0])

    option_cols = [c for c in cols if c not in (cat_col, sub_col)]

    visa_map: Dict[str, Dict[str, Dict[str, Any]]] = {}
    for _, row in df_visa.iterrows():
        cat = _safe_str(row.get(cat_col, "")).strip()
        sub = _safe_str(row.get(sub_col, "")).strip()
        if not cat or not sub:
            continue
        opts: List[str] = []
        for oc in option_cols:
            v = row.get(oc, 0)
            if _to_float(v) == 1:
                opts.append(_safe_str(oc).strip())

        visa_map.setdefault(cat, {}).setdefault(sub, {})["options"] = opts

    return visa_map

def render_option_checkboxes(options: List[str], keyprefix: str, preselected: List[str] | None = None) -> List[str]:
    """Affiche des cases √† cocher pour chaque option (1√®re ligne du Visa). Retourne la liste coch√©e."""
    if not options:
        return []
    pre = set(preselected or [])
    sel: List[str] = []
    cols = st.columns(min(4, max(1, len(options))))
    for i, opt in enumerate(options):
        with cols[i % len(cols)]:
            is_on = st.checkbox(opt, value=(opt in pre), key=f"{keyprefix}_{i}")
        if is_on:
            sel.append(opt)
    return sel

def compute_visa_string(sub: str, options: List[str]) -> str:
    """Affiche 'Sous-cat√©gorie + (options tri√©es)'. Ex: 'B-1 COS' ou 'F-1 COS EOS'."""
    sub = _safe_str(sub)
    if not options:
        return sub
    opt_txt = " ".join(sorted([_safe_str(o) for o in options]))
    return f"{sub} {opt_txt}".strip()

# ---------------------------
# ID et Dossier N
# ---------------------------
def make_client_id(nom: str, dt: date | datetime | None) -> str:
    base = _norm(nom).replace(" ", "")
    if not base:
        base = "client"
    d = _date_for_widget(dt, date.today())
    return f"{base}-{d:%Y%m%d}"

def next_dossier_number(df: pd.DataFrame, start: int = 13057) -> int:
    if DOSSIER_COL in df.columns:
        try:
            mx = pd.to_numeric(df[DOSSIER_COL], errors="coerce").max()
            return int(mx) + 1 if pd.notna(mx) else start
        except Exception:
            return start
    return start

# ---------------------------
# M√©moire de chemins (session)
# ---------------------------
if "last_clients_path" not in st.session_state: st.session_state.last_clients_path = ""
if "last_visa_path" not in st.session_state: st.session_state.last_visa_path = ""
if "zip_export_blob" not in st.session_state: st.session_state.zip_export_blob = None

# ---------------------------
# Zone chargement fichiers
# ---------------------------
st.markdown("## üìÇ Fichiers")
mode = st.radio("Mode de chargement", ["Deux fichiers (Clients & Visa)", "Un seul fichier (2 onglets)"], horizontal=False)

up_clients = None
up_visa = None
single_file = None

if mode == "Deux fichiers (Clients & Visa)":
    up_clients = st.file_uploader("Clients (xlsx)", type=["xlsx"])
    up_visa    = st.file_uploader("Visa (xlsx)", type=["xlsx"])
else:
    single_file = st.file_uploader("Fichier unique (2 onglets : Clients & Visa)", type=["xlsx"])

# Appliquer chargements
clients_path = st.session_state.last_clients_path
visa_path    = st.session_state.last_visa_path

# Cas 2 fichiers
if up_clients is not None:
    clients_path = "clients_uploaded.xlsx"
    with open(clients_path, "wb") as f:
        f.write(up_clients.read())
    st.session_state.last_clients_path = clients_path

if up_visa is not None:
    visa_path = "visa_uploaded.xlsx"
    with open(visa_path, "wb") as f:
        f.write(up_visa.read())
    st.session_state.last_visa_path = visa_path

# Cas 1 fichier
if single_file is not None:
    both_path = "workbook_uploaded.xlsx"
    with open(both_path, "wb") as f:
        f.write(single_file.read())
    # on consid√®re ce fichier comme source des 2 feuilles
    clients_path = both_path
    visa_path    = both_path
    st.session_state.last_clients_path = clients_path
    st.session_state.last_visa_path    = visa_path

# Si rien upload√©, tenter de retrouver derniers chemins (si existent sur disque)
if clients_path and not os.path.exists(clients_path):
    clients_path = ""
if visa_path and not os.path.exists(visa_path):
    visa_path = ""

# Alerte si manquants
if not clients_path:
    st.warning("Aucun fichier **Clients** charg√© pour le moment.")
if not visa_path:
    st.warning("Aucun fichier **Visa** charg√© pour le moment.")

st.markdown("# üõÇ Visa Manager")

# Charger les donn√©es actuelles
df_clients_raw = pd.DataFrame()
df_visa_raw    = pd.DataFrame()
if clients_path:
    try:
        df_clients_raw = read_clients_file(clients_path)
    except Exception as e:
        st.error("Impossible de lire la feuille Clients : " + _safe_str(e))
if visa_path:
    try:
        df_visa_raw = read_visa_file(visa_path)
    except Exception as e:
        st.error("Impossible de lire la feuille Visa : " + _safe_str(e))

df_all = normalize_clients(df_clients_raw)
visa_map = build_visa_map(df_visa_raw.copy()) if not df_visa_raw.empty else {}

# Cl√© de widgets stable selon fichiers
SID = hashlib.md5(f"{clients_path}|{visa_path}".encode()).hexdigest()[:6] if (clients_path or visa_path) else "base"

# ---------------------------
# Barre lat√©rale ‚Äî navigation
# ---------------------------
with st.sidebar:
    st.markdown("## Navigation")
    st.write("‚Ä¢ üìä Dashboard\n‚Ä¢ üìà Analyses\n‚Ä¢ üè¶ Escrow\n‚Ä¢ üë§ Clients\n‚Ä¢ üìÑ Visa (aper√ßu)")
    st.markdown("---")
    if clients_path:
        st.caption(f"Clients: `{os.path.basename(clients_path)}`")
    if visa_path:
        st.caption(f"Visa: `{os.path.basename(visa_path)}`")

# ---------------------------
# Tabs principaux
# ---------------------------
tabs = st.tabs(["üìä Dashboard", "üìà Analyses", "üè¶ Escrow", "üë§ Clients", "üìÑ Visa (aper√ßu)"])

# =========================================================
# üìä ONGLET : Dashboard (liste + KPI + filtres)
# =========================================================
with tabs[0]:
    st.subheader("üìä Dashboard")

    if df_all.empty:
        st.info("Aucune donn√©e client.")
    else:
        years  = sorted([int(y) for y in pd.to_numeric(df_all["_Ann√©e_"], errors="coerce").dropna().unique().tolist()])
        months = [f"{m:02d}" for m in range(1, 13)]
        cats   = sorted(df_all["Categorie"].dropna().astype(str).unique().tolist()) if "Categorie" in df_all.columns else []
        subs   = sorted(df_all["Sous-categorie"].dropna().astype(str).unique().tolist()) if "Sous-categorie" in df_all.columns else []
        visas  = sorted(df_all["Visa"].dropna().astype(str).unique().tolist()) if "Visa" in df_all.columns else []

        f1, f2, f3, f4, f5 = st.columns([1,1,1,1,1])
        fy = f1.multiselect("Ann√©e", years, default=[], key=f"dash_years_{SID}")
        fm = f2.multiselect("Mois (MM)", months, default=[], key=f"dash_months_{SID}")
        fc = f3.multiselect("Cat√©gorie", cats, default=[], key=f"dash_cats_{SID}")
        fs = f4.multiselect("Sous-cat√©gorie", subs, default=[], key=f"dash_subs_{SID}")
        fv = f5.multiselect("Visa", visas, default=[], key=f"dash_visas_{SID}")

        ff = df_all.copy()
        if fy: ff = ff[ff["_Ann√©e_"].isin(fy)]
        if fm: ff = ff[ff["Mois"].astype(str).isin(fm)]
        if fc: ff = ff[ff["Categorie"].astype(str).isin(fc)]
        if fs: ff = ff[ff["Sous-categorie"].astype(str).isin(fs)]
        if fv: ff = ff[ff["Visa"].astype(str).isin(fv)]

        # KPI compacts
        st.markdown('<div class="small-metrics">', unsafe_allow_html=True)
        k1, k2, k3, k4, k5 = st.columns(5)
        k1.metric("Dossiers", f"{len(ff)}")
        k2.metric("Honoraires", _fmt_money_us(float(_safe_num_series(ff, HONO).sum())))
        k3.metric("Autres frais", _fmt_money_us(float(_safe_num_series(ff, AUTRE).sum())))
        k4.metric("Pay√©", _fmt_money_us(float(_safe_num_series(ff, "Pay√©").sum())))
        k5.metric("Reste", _fmt_money_us(float(_safe_num_series(ff, "Reste").sum())))
        st.markdown('</div>', unsafe_allow_html=True)

        # Table
        view = ff.copy()
        for c in [HONO, AUTRE, TOTAL, "Pay√©", "Reste"]:
            if c in view.columns:
                view[c] = _safe_num_series(view, c).map(_fmt_money_us)
        if "Date" in view.columns:
            try:
                view["Date"] = pd.to_datetime(view["Date"], errors="coerce").dt.date.astype(str)
            except Exception:
                view["Date"] = view["Date"].astype(str)

        show_cols = [c for c in [
            DOSSIER_COL,"ID_Client","Nom","Categorie","Sous-categorie","Visa","Date","Mois",
            HONO, AUTRE, TOTAL, "Pay√©", "Reste",
            "Dossier envoy√©","Dossier accept√©","Dossier refus√©","Dossier annul√©","RFE"
        ] if c in view.columns]

        sort_cols = [c for c in ["_Ann√©e_", "_MoisNum_", "Categorie", "Nom"] if c in view.columns]
        v = view.copy()
        if sort_cols:
            v = v.sort_values(by=sort_cols)
        v = v.loc[:, ~v.columns.duplicated()].copy()

        st.dataframe(v[show_cols].reset_index(drop=True), use_container_width=True, key=f"dash_tbl_{SID}")




# ===============================
# ======   PARTIE 2 / 2    ======
# ===============================

# =========================================================
# üìà ONGLET : Analyses (filtres + KPI + graph + d√©tails)
# =========================================================
with tabs[1]:
    st.subheader("üìà Analyses")

    if df_all.empty:
        st.info("Aucune donn√©e client.")
    else:
        yearsA  = sorted([int(y) for y in pd.to_numeric(df_all["_Ann√©e_"], errors="coerce").dropna().unique().tolist()])
        monthsA = [f"{m:02d}" for m in range(1, 13)]
        catsA   = sorted(df_all["Categorie"].dropna().astype(str).unique().tolist()) if "Categorie" in df_all.columns else []
        subsA   = sorted(df_all["Sous-categorie"].dropna().astype(str).unique().tolist()) if "Sous-categorie" in df_all.columns else []
        visasA  = sorted(df_all["Visa"].dropna().astype(str).unique().tolist()) if "Visa" in df_all.columns else []

        a1, a2, a3, a4, a5 = st.columns(5)
        fy = a1.multiselect("Ann√©e", yearsA, default=[], key=f"a_years_{SID}")
        fm = a2.multiselect("Mois (MM)", monthsA, default=[], key=f"a_months_{SID}")
        fc = a3.multiselect("Cat√©gorie", catsA, default=[], key=f"a_cats_{SID}")
        fs = a4.multiselect("Sous-cat√©gorie", subsA, default=[], key=f"a_subs_{SID}")
        fv = a5.multiselect("Visa", visasA, default=[], key=f"a_visas_{SID}")

        dfA = df_all.copy()
        if fy: dfA = dfA[dfA["_Ann√©e_"].isin(fy)]
        if fm: dfA = dfA[dfA["Mois"].astype(str).isin(fm)]
        if fc: dfA = dfA[dfA["Categorie"].astype(str).isin(fc)]
        if fs: dfA = dfA[dfA["Sous-categorie"].astype(str).isin(fs)]
        if fv: dfA = dfA[dfA["Visa"].astype(str).isin(fv)]

        # KPI compacts
        st.markdown('<div class="small-metrics">', unsafe_allow_html=True)
        k1, k2, k3, k4 = st.columns(4)
        k1.metric("Dossiers", f"{len(dfA)}")
        k2.metric("Honoraires", _fmt_money_us(float(_safe_num_series(dfA, HONO).sum())))
        k3.metric("Pay√©",      _fmt_money_us(float(_safe_num_series(dfA, "Pay√©").sum())))
        k4.metric("Reste",     _fmt_money_us(float(_safe_num_series(dfA, "Reste").sum())))
        st.markdown('</div>', unsafe_allow_html=True)

        # Graphiques simples (barres)
        if not dfA.empty and "Categorie" in dfA.columns:
            st.markdown("#### Dossiers par cat√©gorie")
            vc = dfA["Categorie"].value_counts().reset_index()
            vc.columns = ["Categorie", "Nombre"]
            st.bar_chart(vc.set_index("Categorie"))

        if not dfA.empty and HONO in dfA.columns and "Mois" in dfA.columns:
            st.markdown("#### Honoraires par mois")
            tmp = dfA.copy()
            tmp["Mois"] = tmp["Mois"].astype(str)
            gm = tmp.groupby("Mois", as_index=False)[HONO].sum().sort_values("Mois")
            st.line_chart(gm.set_index("Mois"))

        # D√©tails format√©s
        st.markdown("#### D√©tails filtr√©s")
        det = dfA.copy()
        for c in [HONO, AUTRE, TOTAL, "Pay√©", "Reste"]:
            if c in det.columns:
                det[c] = _safe_num_series(det, c).map(_fmt_money_us)
        if "Date" in det.columns:
            try:
                det["Date"] = pd.to_datetime(det["Date"], errors="coerce").dt.date.astype(str)
            except Exception:
                det["Date"] = det["Date"].astype(str)

        show_cols = [c for c in [
            DOSSIER_COL, "ID_Client", "Nom", "Categorie", "Sous-categorie", "Visa",
            "Date", "Mois", HONO, AUTRE, TOTAL, "Pay√©", "Reste",
            "Dossier envoy√©", "Dossier accept√©", "Dossier refus√©", "Dossier annul√©", "RFE"
        ] if c in det.columns]

        sort_cols = [c for c in ["_Ann√©e_", "_MoisNum_", "Categorie", "Nom"] if c in det.columns]
        det_sorted = det.sort_values(by=sort_cols) if sort_cols else det
        det_sorted = det_sorted.loc[:, ~det_sorted.columns.duplicated()].copy()

        st.dataframe(det_sorted[show_cols].reset_index(drop=True),
                     use_container_width=True, key=f"a_det_{SID}")


# =========================================================
# üè¶ ONGLET : Escrow (synth√®se)
# =========================================================
with tabs[2]:
    st.subheader("üè¶ Escrow ‚Äî synth√®se")

    if df_all.empty:
        st.info("Aucun client.")
    else:
        dfE = df_all.copy()
        dfE[TOTAL] = _safe_num_series(dfE, TOTAL)
        dfE["Pay√©"] = _safe_num_series(dfE, "Pay√©")
        dfE["Reste"] = _safe_num_series(dfE, "Reste")

        agg = dfE.groupby("Categorie", as_index=False)[[TOTAL, "Pay√©", "Reste"]].sum()
        agg["% Pay√©"] = (agg["Pay√©"] / agg[TOTAL]).replace([pd.NA, pd.NaT], 0).fillna(0) * 100.0
        st.dataframe(agg, use_container_width=True, key=f"esc_agg_{SID}")

        k1, k2, k3 = st.columns(3)
        k1.metric("Total", _fmt_money_us(float(dfE[TOTAL].sum())))
        k2.metric("Pay√©",  _fmt_money_us(float(dfE["Pay√©"].sum())))
        k3.metric("Reste", _fmt_money_us(float(dfE["Reste"].sum())))

        st.caption("NB : si vous tenez un compte ESCROW par dossier, vous pouvez utiliser la colonne 'Paiements' pour distinguer les acomptes et d√©clencher vos transferts une fois ¬´ Dossier envoy√© ¬ª coch√©.")


# =========================================================
# üë§ ONGLET : Clients ‚Äî CRUD + Paiements + Statuts
# =========================================================
with tabs[3]:
    st.subheader("üë§ Clients ‚Äî Ajouter / Modifier / Supprimer")

    # Relecture ‚Äúraw‚Äù pour √©diter/√©crire
    df_live = pd.DataFrame()
    if clients_path:
        try:
            df_live = read_clients_file(clients_path)
        except Exception as e:
            st.error("Lecture Clients impossible : " + _safe_str(e))
    df_live = normalize_clients(df_live)

    action = st.radio("Action", ["Ajouter", "Modifier", "Supprimer"], horizontal=True, key=f"cli_action_{SID}")

    # --------- AJOUT ---------
    if action == "Ajouter":
        st.markdown("### ‚ûï Ajouter un client")
        c1, c2, c3 = st.columns(3)
        nom  = c1.text_input("Nom", "", key=f"add_nom_{SID}")
        dt   = c2.date_input("Date de cr√©ation", value=date.today(), key=f"add_date_{SID}")
        mois = c3.selectbox("Mois (MM)", [f"{m:02d}" for m in range(1,13)],
                            index=date.today().month-1, key=f"add_mois_{SID}")

        st.markdown("#### üéØ Visa")
        cats = sorted(list(visa_map.keys()))
        sel_cat = st.selectbox("Cat√©gorie", [""]+cats, index=0, key=f"add_cat_{SID}")
        sel_sub = ""
        selected_opts: List[str] = []
        if sel_cat:
            subs = sorted(list(visa_map.get(sel_cat, {}).keys()))
            sel_sub = st.selectbox("Sous-cat√©gorie", [""]+subs, index=0, key=f"add_sub_{SID}")
            if sel_sub:
                opt_list = visa_map.get(sel_cat, {}).get(sel_sub, {}).get("options", [])
                selected_opts = render_option_checkboxes(opt_list, keyprefix=f"add_opt_{SID}", preselected=[])

        final_visa = compute_visa_string(sel_sub, selected_opts)

        f1, f2 = st.columns(2)
        honor = f1.number_input(HONO, min_value=0.0, value=0.0, step=50.0, format="%.2f", key=f"add_h_{SID}")
        other = f2.number_input(AUTRE, min_value=0.0, value=0.0, step=20.0, format="%.2f", key=f"add_o_{SID}")

        st.markdown("#### üìå Statuts (avec dates)")
        s1, s2, s3, s4, s5 = st.columns(5)
        sent = s1.checkbox("Dossier envoy√©", key=f"add_sent_{SID}")
        sent_d = s1.date_input("Date d'envoi", value=None, key=f"add_sentd_{SID}")
        acc = s2.checkbox("Dossier accept√©", key=f"add_acc_{SID}")
        acc_d = s2.date_input("Date d'acceptation", value=None, key=f"add_accd_{SID}")
        ref = s3.checkbox("Dossier refus√©", key=f"add_ref_{SID}")
        ref_d = s3.date_input("Date de refus", value=None, key=f"add_refd_{SID}")
        ann = s4.checkbox("Dossier annul√©", key=f"add_ann_{SID}")
        ann_d = s4.date_input("Date d'annulation", value=None, key=f"add_annd_{SID}")
        rfe = s5.checkbox("RFE", key=f"add_rfe_{SID}")
        if rfe and not any([sent, acc, ref, ann]):
            st.warning("RFE doit √™tre coch√© avec un autre statut (envoy√©/accept√©/refus√©/annul√©).")

        if st.button("üíæ Enregistrer", key=f"btn_add_{SID}"):
            if not nom:
                st.warning("Le nom est requis.")
                st.stop()
            if not sel_cat or not sel_sub:
                st.warning("Choisissez la cat√©gorie et la sous-cat√©gorie.")
                st.stop()

            total = float(honor) + float(other)
            paye  = 0.0
            reste = total - paye

            new_row = {
                DOSSIER_COL: next_dossier_number(df_live),
                "ID_Client": make_client_id(nom, dt),
                "Nom": nom,
                "Date": dt,
                "Mois": f"{int(_safe_str(mois)):02d}",
                "Categorie": sel_cat,
                "Sous-categorie": sel_sub,
                "Visa": final_visa if final_visa else sel_sub,
                HONO: float(honor),
                AUTRE: float(other),
                TOTAL: total,
                "Pay√©": paye,
                "Reste": reste,
                "Paiements": [],
                "Options": selected_opts,
                "Dossier envoy√©": 1 if sent else 0,
                "Date d'envoi": sent_d if sent_d else None,
                "Dossier accept√©": 1 if acc else 0,
                "Date d'acceptation": acc_d if acc_d else None,
                "Dossier refus√©": 1 if ref else 0,
                "Date de refus": ref_d if ref_d else None,
                "Dossier annul√©": 1 if ann else 0,
                "Date d'annulation": ann_d if ann_d else None,
                "RFE": 1 if rfe else 0,
            }

            df_new = pd.concat([df_live, pd.DataFrame([new_row])], ignore_index=True)
            ok, err = write_workbook(df_new, clients_path, df_visa_raw, visa_path)
            if ok:
                st.success("Client ajout√©.")
                st.cache_data.clear()
                st.rerun()
            else:
                st.error("√âchec √©criture : " + err)

    # --------- MODIFICATION ---------
    if action == "Modifier":
        st.markdown("### ‚úèÔ∏è Modifier un client")
        if df_live.empty:
            st.info("Aucun client √† modifier.")
        else:
            # S√©lection du client
            ids = df_live["ID_Client"].dropna().astype(str).tolist()
            target_id = st.selectbox("ID_Client", [""] + sorted(ids), index=0, key=f"mod_id_{SID}")
            if not target_id:
                st.stop()

            mask = (df_live["ID_Client"].astype(str) == target_id)
            if not mask.any():
                st.warning("Ligne introuvable.")
                st.stop()

            idx = df_live[mask].index[0]
            row = df_live.loc[idx].copy()

            # En-t√™te : identifiants & info
            st.write({DOSSIER_COL: row.get(DOSSIER_COL,""), "Nom": row.get("Nom",""), "Visa": row.get("Visa","")})

            d1, d2, d3 = st.columns(3)
            nom  = d1.text_input("Nom", _safe_str(row.get("Nom","")), key=f"mod_nomv_{SID}")
            dt   = d2.date_input("Date de cr√©ation", value=_date_for_widget(row.get("Date"), date.today()), key=f"mod_date_{SID}")
            mois = d3.selectbox("Mois (MM)", [f"{m:02d}" for m in range(1,13)],
                                index=_month_index(row.get("Mois","01")), key=f"mod_mois_{SID}")

            # Visa cascade + options
            st.markdown("#### üéØ Visa")
            cats = sorted(list(visa_map.keys()))
            preset_cat = _safe_str(row.get("Categorie",""))
            sel_cat = st.selectbox("Cat√©gorie", [""]+cats,
                                   index=_best_index(cats, preset_cat),
                                   key=f"mod_cat_{SID}")

            subs = sorted(list(visa_map.get(sel_cat, {}).keys())) if sel_cat else []
            preset_sub = _safe_str(row.get("Sous-categorie",""))
            sel_sub = st.selectbox("Sous-cat√©gorie", [""]+subs,
                                   index=_best_index(subs, preset_sub),
                                   key=f"mod_sub_{SID}")

            preset_opts = row.get("Options", [])
            if not isinstance(preset_opts, list):
                try:
                    preset_opts = json.loads(_safe_str(preset_opts) or "[]")
                    if not isinstance(preset_opts, list):
                        preset_opts = []
                except Exception:
                    preset_opts = []

            selected_opts: List[str] = []
            if sel_cat and sel_sub:
                opt_list = visa_map.get(sel_cat, {}).get(sel_sub, {}).get("options", [])
                selected_opts = render_option_checkboxes(opt_list, keyprefix=f"mod_opt_{SID}", preselected=preset_opts)
            final_visa = compute_visa_string(sel_sub, selected_opts)

            # Montants
            f1, f2, f3, f4 = st.columns(4)
            honor = f1.number_input(HONO, min_value=0.0,
                                    value=float(_safe_num_series(pd.DataFrame([row]), HONO).iloc[0]),
                                    step=50.0, format="%.2f", key=f"mod_h_{SID}")
            other = f2.number_input(AUTRE, min_value=0.0,
                                    value=float(_safe_num_series(pd.DataFrame([row]), AUTRE).iloc[0]),
                                    step=20.0, format="%.2f", key=f"mod_o_{SID}")
            paye  = float(_safe_num_series(pd.DataFrame([row]), "Pay√©").iloc[0])
            reste = max(0.0, float(honor) + float(other) - paye)
            f3.metric("Pay√©", _fmt_money_us(paye))
            f4.metric("Reste", _fmt_money_us(reste))

            # Paiements
            st.markdown("#### üíµ Paiements")
            pay_list = row.get("Paiements", [])
            if not isinstance(pay_list, list):
                try:
                    pay_list = json.loads(_safe_str(pay_list) or "[]")
                    if not isinstance(pay_list, list):
                        pay_list = []
                except Exception:
                    pay_list = []
            # affichage historique
            if pay_list:
                disp = pd.DataFrame(pay_list)
                if "Montant" in disp.columns:
                    disp["Montant"] = disp["Montant"].apply(_to_float).map(_fmt_money_us)
                st.dataframe(disp, use_container_width=True, key=f"pay_hist_{SID}")
            else:
                st.caption("Aucun paiement enregistr√©.")

            # Ajout paiement si reste > 0
            if reste > 0.0001:
                ap1, ap2, ap3, ap4 = st.columns([1,1,1,1])
                pay_date = ap1.date_input("Date paiement", value=date.today(), key=f"pay_date_{SID}")
                pay_mode = ap2.selectbox("Mode", ["CB","Ch√®que","Cash","Virement","Venmo"], key=f"pay_mode_{SID}")
                pay_amt  = ap3.number_input("Montant (US $)", min_value=0.0, value=0.0, step=20.0, format="%.2f", key=f"pay_amt_{SID}")
                if ap4.button("Ajouter paiement", key=f"btn_addpay_{SID}"):
                    add = float(pay_amt or 0.0)
                    if add <= 0:
                        st.warning("Le montant doit √™tre > 0.")
                        st.stop()
                    pay_list.append({"Date": _safe_str(pay_date), "Mode": pay_mode, "Montant": add})
                    paye_new  = paye + add
                    total_new = float(honor) + float(other)
                    reste_new = max(0.0, total_new - paye_new)

                    # mise √† jour row / df_live
                    df_live.at[idx, "Paiements"] = pay_list
                    df_live.at[idx, "Pay√©"] = paye_new
                    df_live.at[idx, "Reste"] = reste_new

                    ok, err = write_workbook(df_live, clients_path, df_visa_raw, visa_path)
                    if ok:
                        st.success("Paiement ajout√©.")
                        st.cache_data.clear()
                        st.rerun()
                    else:
                        st.error("Erreur √©criture : " + err)

            # Statuts + dates
            st.markdown("#### üìå Statuts & dates")
            s1, s2, s3, s4, s5 = st.columns(5)
            sent  = s1.checkbox("Dossier envoy√©", value=bool(row.get("Dossier envoy√©")), key=f"mod_sent_{SID}")
            sent_d = s1.date_input("Date d'envoi", value=_date_for_widget(row.get("Date d'envoi")), key=f"mod_sentd_{SID}")
            acc   = s2.checkbox("Dossier accept√©", value=bool(row.get("Dossier accept√©")), key=f"mod_acc_{SID}")
            acc_d = s2.date_input("Date d'acceptation", value=_date_for_widget(row.get("Date d'acceptation")), key=f"mod_accd_{SID}")
            ref   = s3.checkbox("Dossier refus√©", value=bool(row.get("Dossier refus√©")), key=f"mod_ref_{SID}")
            ref_d = s3.date_input("Date de refus", value=_date_for_widget(row.get("Date de refus")), key=f"mod_refd_{SID}")
            ann   = s4.checkbox("Dossier annul√©", value=bool(row.get("Dossier annul√©")), key=f"mod_ann_{SID}")
            ann_d = s4.date_input("Date d'annulation", value=_date_for_widget(row.get("Date d'annulation")), key=f"mod_annd_{SID}")
            rfe   = s5.checkbox("RFE", value=bool(row.get("RFE")), key=f"mod_rfe_{SID}")

            if rfe and not any([sent, acc, ref, ann]):
                st.warning("RFE doit √™tre coch√© avec un autre statut (envoy√©/accept√©/refus√©/annul√©).")

            if st.button("üíæ Enregistrer les modifications", key=f"btn_mod_{SID}"):
                if not nom:
                    st.warning("Le nom est requis.")
                    st.stop()
                if not sel_cat or not sel_sub:
                    st.warning("Choisissez Cat√©gorie et Sous-cat√©gorie.")
                    st.stop()

                total_new = float(honor) + float(other)
                # paye/reste d√©j√† recalcul√©s lors d‚Äôun ajout paiement ; sinon recalcul ici
                paye_now  = float(_safe_num_series(pd.DataFrame([df_live.loc[idx]]), "Pay√©").iloc[0])
                reste_now = max(0.0, total_new - paye_now)

                df_live.at[idx, "Nom"] = nom
                df_live.at[idx, "Date"] = dt
                df_live.at[idx, "Mois"] = f"{int(_safe_str(mois)):02d}"
                df_live.at[idx, "Categorie"] = sel_cat
                df_live.at[idx, "Sous-categorie"] = sel_sub
                df_live.at[idx, "Visa"] = (final_visa if final_visa else sel_sub)
                df_live.at[idx, HONO] = float(honor)
                df_live.at[idx, AUTRE] = float(other)
                df_live.at[idx, TOTAL] = total_new
                df_live.at[idx, "Reste"] = reste_now
                df_live.at[idx, "Options"] = selected_opts
                df_live.at[idx, "Dossier envoy√©"] = 1 if sent else 0
                df_live.at[idx, "Date d'envoi"] = sent_d if sent_d else None
                df_live.at[idx, "Dossier accept√©"] = 1 if acc else 0
                df_live.at[idx, "Date d'acceptation"] = acc_d if acc_d else None
                df_live.at[idx, "Dossier refus√©"] = 1 if ref else 0
                df_live.at[idx, "Date de refus"] = ref_d if ref_d else None
                df_live.at[idx, "Dossier annul√©"] = 1 if ann else 0
                df_live.at[idx, "Date d'annulation"] = ann_d if ann_d else None
                df_live.at[idx, "RFE"] = 1 if rfe else 0

                ok, err = write_workbook(df_live, clients_path, df_visa_raw, visa_path)
                if ok:
                    st.success("Modifications enregistr√©es.")
                    st.cache_data.clear()
                    st.rerun()
                else:
                    st.error("Erreur √©criture : " + err)

    # --------- SUPPRESSION ---------
    if action == "Supprimer":
        st.markdown("### üóëÔ∏è Supprimer un client")
        if df_live.empty:
            st.info("Aucun client √† supprimer.")
        else:
            ids = df_live["ID_Client"].dropna().astype(str).tolist()
            target_id = st.selectbox("ID_Client", [""]+sorted(ids), index=0, key=f"del_id_{SID}")
            if target_id:
                mask = (df_live["ID_Client"].astype(str) == target_id)
                if mask.any():
                    row = df_live[mask].iloc[0]
                    st.write({DOSSIER_COL: row.get(DOSSIER_COL,""), "Nom": row.get("Nom",""), "Visa": row.get("Visa","")})
                    if st.button("‚ùó Confirmer la suppression", key=f"btn_del_{SID}"):
                        df_new = df_live[~mask].copy()
                        ok, err = write_workbook(df_new, clients_path, df_visa_raw, visa_path)
                        if ok:
                            st.success("Client supprim√©.")
                            st.cache_data.clear()
                            st.rerun()
                        else:
                            st.error("Erreur √©criture : " + err)


# =========================================================
# üìÑ ONGLET : Visa (aper√ßu & √©dition par cases √† cocher)
# =========================================================
with tabs[4]:
    st.subheader("üìÑ Visa (aper√ßu & √©dition)")

    if df_visa_raw.empty:
        st.info("Aucune feuille Visa charg√©e.")
    else:
        # D√©tecter colonnes cat√©gorie / sous-cat√©gorie / options
        cols = list(df_visa_raw.columns)
        cat_col = None
        sub_col = None
        for c in cols:
            n = _norm(c)
            if n in ("categorie", "category") and cat_col is None:
                cat_col = c
            if ("sous" in n and "categor" in n) and sub_col is None:
                sub_col = c
        if cat_col is None: cat_col = "Categorie" if "Categorie" in df_visa_raw.columns else cols[0]
        if sub_col is None:
            candidates = [c for c in cols if c != cat_col]
            sub_col = "Sous-categorie" if "Sous-categorie" in df_visa_raw.columns else (candidates[0] if candidates else cols[0])

        option_cols = [c for c in cols if c not in (cat_col, sub_col)]

        # Filtre pour aper√ßu
        f1, f2 = st.columns(2)
        cats = sorted(df_visa_raw[cat_col].dropna().astype(str).unique().tolist())
        sel_cat_v = f1.selectbox("Cat√©gorie", [""]+cats, index=0, key=f"vz_cat_{SID}")
        subs = sorted(df_visa_raw[df_visa_raw[cat_col].astype(str)==sel_cat_v][sub_col].dropna().astype(str).unique().tolist()) if sel_cat_v else []
        sel_sub_v = f2.selectbox("Sous-cat√©gorie", [""]+subs, index=0, key=f"vz_sub_{SID}")

        # Affichage des options (cases) et √©dition
        df_edit = df_visa_raw.copy()
        if sel_cat_v and sel_sub_v:
            mask = (df_edit[cat_col].astype(str)==sel_cat_v) & (df_edit[sub_col].astype(str)==sel_sub_v)
            if mask.any():
                rix = df_edit[mask].index[0]
                st.markdown("#### Options actives (cocher = 1)")
                cols_opt = st.columns(min(4, max(1, len(option_cols))))
                new_vals = {}
                for i, oc in enumerate(option_cols):
                    cur = _to_float(df_edit.at[rix, oc]) == 1.0
                    with cols_opt[i % len(cols_opt)]:
                        val = st.checkbox(oc, value=cur, key=f"vz_opt_{SID}_{i}")
                    new_vals[oc] = 1 if val else 0
                if st.button("üíæ Enregistrer Visa", key=f"btn_vz_save_{SID}"):
                    for oc, v in new_vals.items():
                        df_edit.at[rix, oc] = v
                    # √âcrire
                    ok, err = write_workbook(read_clients_file(clients_path) if clients_path else df_clients_raw,
                                             clients_path,
                                             df_edit,
                                             visa_path)
                    if ok:
                        st.success("Feuille Visa enregistr√©e.")
                        st.cache_data.clear()
                        st.rerun()
                    else:
                        st.error("Erreur √©criture : " + err)

        # Aper√ßu complet
        st.markdown("#### Aper√ßu de la table Visa")
        st.dataframe(df_visa_raw, use_container_width=True, key=f"vz_tbl_{SID}")


# =========================================================
# üíΩ Export global (ZIP)
# =========================================================
st.markdown("---")
st.markdown("### üíΩ Export global (Clients + Visa)")

colz1, colz2 = st.columns([1,3])
with colz1:
    if st.button("Pr√©parer l‚Äôarchive ZIP", key=f"zip_btn_{SID}"):
        try:
            buf = BytesIO()
            with zipfile.ZipFile(buf, "w", zipfile.ZIP_DEFLATED) as zf:
                # Clients
                if clients_path and os.path.exists(clients_path):
                    # si fichier unique => on le met tel quel
                    if clients_path == visa_path:
                        zf.write(clients_path, arcname=os.path.basename(clients_path))
                    else:
                        # √©criture clients propre
                        with BytesIO() as cb:
                            with pd.ExcelWriter(cb, engine="openpyxl") as wr:
                                read_clients_file.clear()  # pour recharger proprement
                                dfc = read_clients_file(clients_path)
                                dfc.to_excel(wr, sheet_name=SHEET_CLIENTS, index=False)
                            zf.writestr("Clients.xlsx", cb.getvalue())
                # Visa
                if visa_path and os.path.exists(visa_path) and clients_path != visa_path:
                    zf.write(visa_path, arcname=os.path.basename(visa_path))
            st.session_state.zip_export_blob = buf.getvalue()
            st.success("Archive pr√™te.")
        except Exception as e:
            st.error("Erreur de pr√©paration : " + _safe_str(e))

with colz2:
    if st.session_state.get("zip_export_blob"):
        st.download_button(
            label="‚¨áÔ∏è T√©l√©charger l‚Äôexport (ZIP)",
            data=st.session_state.zip_export_blob,
            file_name="Export_Visa_Manager.zip",
            mime="application/zip",
            key=f"zip_dl_{SID}",
        )